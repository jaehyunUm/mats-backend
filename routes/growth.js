const express = require('express');
const router = express.Router();
const db = require('../db'); // ‚úÖ MySQL Ïó∞Í≤∞
const verifyToken = require('../middleware/verifyToken');


// ‚úÖ ÌïôÏÉù ÏÑ±Ïû• Í∏∞Î°ù Î∞è Íµ¨ÎèÖ Ï∑®ÏÜå ÎÇ¥Ïó≠ Î∞òÏòÅ API
router.get('/growth/history', verifyToken, async (req, res) => {
  const { dojang_code } = req.user;

  if (!dojang_code) {
    return res.status(400).json({ success: false, message: 'Dojang code is required.' });
  }

  try {
    // ‚úÖ student_growthÏóêÏÑú Îì±Î°ù Îç∞Ïù¥ÌÑ∞ + ÎàÑÏ†ÅÍ∞í Í∞ÄÏ†∏Ïò§Í∏∞
    const [growthData] = await db.query(
      `SELECT 
         month, 
         SUM(registered_students) AS registered_students,
         MAX(cumulative_students) AS cumulative_students
       FROM student_growth
       WHERE dojang_code = ?
       GROUP BY month
       ORDER BY month ASC`,
      [dojang_code]
    );

    // ‚úÖ Ï∑®ÏÜå Îç∞Ïù¥ÌÑ∞Îäî Í∑∏ÎåÄÎ°ú ÏõîÎ≥ÑÎ°ú Í∞ÄÏ†∏Ïò§Í∏∞
    const [cancellationData] = await db.query(
      `SELECT 
         DATE_FORMAT(canceled_at, '%Y-%m') AS month, 
         COUNT(*) AS canceled_students
       FROM subscription_cancellations
       WHERE dojang_code = ?
       GROUP BY DATE_FORMAT(canceled_at, '%Y-%m')
       ORDER BY month ASC`,
      [dojang_code]
    );

    // Ï∑®ÏÜå Îç∞Ïù¥ÌÑ∞Î•º MapÏúºÎ°ú Î≥ÄÌôò
    const cancellationsMap = new Map();
    cancellationData.forEach((entry) => {
      cancellationsMap.set(entry.month, entry.canceled_students);
    });

    // ‚úÖ ÎàÑÏ†ÅÏùÄ DBÏóêÏÑú Í∞ÄÏ†∏Ïò® Í∞í ÏÇ¨Ïö©
    const history = growthData.map((entry) => ({
      month: entry.month,
      registered_students: entry.registered_students,
      canceled_students: cancellationsMap.get(entry.month) || 0,
      cumulative_students: entry.cumulative_students // üëâ DB Í∞í Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©
    }));

    res.status(200).json({ success: true, history });
  } catch (error) {
    console.error('‚ùå Error fetching growth history:', error);
    res.status(500).json({ success: false, message: 'Error fetching growth history.' });
  }
});


  
  router.get('/revenue/history', verifyToken, async (req, res) => {
    const { dojang_code } = req.user;
    // ‚úÖ Validation
    if (!dojang_code) {
      return res.status(400).json({ success: false, message: 'Dojang code is required.' });
    }
  
    try {
      // ‚úÖ ÌîÑÎ°úÍ∑∏Îû® Í≤∞Ï†ú ÏàòÏùµ Ï°∞Ìöå
      const [programRevenue] = await db.query(
        `SELECT 
           DATE_FORMAT(payment_date, '%Y-%m') AS month, 
           SUM(amount) AS revenue
         FROM program_payments
         WHERE dojang_code = ?
         GROUP BY DATE_FORMAT(payment_date, '%Y-%m')
         ORDER BY month ASC`,
        [dojang_code]
      );
  
      // ‚úÖ ÏïÑÏù¥ÌÖú Í≤∞Ï†ú ÏàòÏùµ Ï°∞Ìöå
      const [itemRevenue] = await db.query(
        `SELECT 
           DATE_FORMAT(payment_date, '%Y-%m') AS month, 
           SUM(amount) AS revenue
         FROM item_payments
         WHERE dojang_code = ?
         GROUP BY DATE_FORMAT(payment_date, '%Y-%m')
         ORDER BY month ASC`,
        [dojang_code]
      );
  
      // ‚úÖ ÌÖåÏä§Ìä∏ Í≤∞Ï†ú ÏàòÏùµ Ï°∞Ìöå
      const [testRevenue] = await db.query(
        `SELECT 
           DATE_FORMAT(payment_date, '%Y-%m') AS month, 
           SUM(amount) AS revenue
         FROM test_payments
         WHERE dojang_code = ?
         GROUP BY DATE_FORMAT(payment_date, '%Y-%m')
         ORDER BY month ASC`,
        [dojang_code]
      );
  
      // ‚úÖ ÏàòÏùµ Îç∞Ïù¥ÌÑ∞Î•º typeÎ≥ÑÎ°ú Íµ¨ÏÑ±
      const formatRevenueData = (data, type) =>
        data.map((entry) => ({
          month: entry.month,
          total_revenue: parseFloat(entry.revenue),
          type, // 'program', 'item', 'test'
        }));
  
      const programData = formatRevenueData(programRevenue, 'program');
      const itemData = formatRevenueData(itemRevenue, 'item');
      const testData = formatRevenueData(testRevenue, 'test');
  
      // ‚úÖ Î™®Îì† Îç∞Ïù¥ÌÑ∞Î•º Ìï©ÏπòÍ∏∞
      const combinedRevenue = [...programData, ...itemData, ...testData];
  
      if (combinedRevenue.length === 0) {
        return res.status(404).json({ success: false, message: 'No revenue history found for this dojang.' });
      }
  
      // ‚úÖ ÏõîÎ≥ÑÎ°ú Ï†ïÎ†¨
      combinedRevenue.sort((a, b) => (a.month > b.month ? 1 : -1));
  
      res.status(200).json({ success: true, history: combinedRevenue });
    } catch (error) {
      console.error('‚ùå Error fetching revenue history:', error);
      res.status(500).json({ success: false, message: 'Error fetching revenue history.' });
    }
  });
  
  
  
module.exports = router; // ‚úÖ ÎùºÏö∞ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞
