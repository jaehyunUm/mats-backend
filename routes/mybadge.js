const express = require('express');
const router = express.Router();
const db = require('../db'); // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Í∞ÄÏ†∏Ïò§Í∏∞
const verifyToken = require('../middleware/verifyToken');
const { upload } = require('../index'); // index.jsÏóêÏÑú Í∞ÄÏ†∏Ïò® upload
const { uploadFileToS3 } = require('../modules/s3Service'); // S3 ÏóÖÎ°úÎìú Ïú†Ìã∏Î¶¨Ìã∞ Ìï®Ïàò
const { deleteFileFromS3 } = require('../modules/s3Service');


// Î∞∞ÏßÄ Ï∂îÍ∞Ä API (Ïù¥ÎØ∏ÏßÄ ÌååÏùº Ìè¨Ìï®)
router.post('/badges', verifyToken, upload.single('image'), async (req, res) => {
  console.log("üì• Received request body:", req.body); // ‚úÖ ÎîîÎ≤ÑÍπÖ Î°úÍ∑∏ Ï∂îÍ∞Ä
  console.log("üìÇ Received file:", req.file); // ‚úÖ ÌååÏùº Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏

  const { name, test_template_id, condition_value } = req.body;
  const { dojang_code } = req.user;

  // ÌïÑÏàò ÌïÑÎìú Ï≤¥ÌÅ¨
  if (!name || !test_template_id || !condition_value) {
      return res.status(400).json({ message: 'Missing required fields' });
  }

  try {
      let fileName = null;

      // ‚úÖ S3Ïóê Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú (ÌååÏùºÏù¥ ÏûàÏùÑ Í≤ΩÏö∞)
      if (req.file) {
          fileName = await uploadFileToS3(req.file.originalname, req.file.buffer, dojang_code);
      }

      // ‚úÖ Î∞∞ÏßÄ Ï†ïÎ≥¥ Ï†ÄÏû• ÏøºÎ¶¨
      const query = `
          INSERT INTO badges (name, image_url, dojang_code, test_template_id, condition_value) 
          VALUES (?, ?, ?, ?, ?)
      `;

      await db.query(query, [name, fileName, dojang_code, test_template_id, condition_value]);

      console.log("‚úî Badge added successfully:", { name, test_template_id, condition_value });
      res.status(201).json({ message: 'Badge added successfully' });
  } catch (err) {
      console.error("‚ùå Error adding badge:", err);
      res.status(500).json({ message: 'Database error', error: err });
  }
});



// ÎèÑÏû•Ïùò Î™®Îì† Î∞∞ÏßÄÎ•º Ï°∞ÌöåÌïòÎäî API
router.get('/badges/all', verifyToken, async (req, res) => {
  const { dojang_code } = req.user; // ÎØ∏Îì§Ïõ®Ïñ¥ÏóêÏÑú Ï∂îÏ∂úÎêú ÎèÑÏû• ÏΩîÎìú

  try {
      const query = 'SELECT * FROM badges WHERE dojang_code = ?';
      const [results] = await db.query(query, [dojang_code]);
      
      res.status(200).json(results);
  } catch (err) {
      console.error('Error fetching all badges:', err);
      res.status(500).json({ message: 'Database error', error: err });
  }
});


// Î∞∞ÏßÄ ÏÇ≠Ï†ú API
router.delete('/badge/:id', verifyToken, async (req, res) => {
    const badgeId = req.params.id;
    const { dojang_code } = req.user;
  
    try {
      // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ÏóêÏÑú Î∞∞ÏßÄÏùò image_urlÏùÑ Î®ºÏ†Ä Ï°∞Ìöå
      const [badge] = await db.query('SELECT image_url FROM badges WHERE id = ? AND dojang_code = ?', [badgeId, dojang_code]);
  
      if (badge.length === 0) {
        return res.status(404).json({ message: 'Badge not found or unauthorized access' });
      }
  
      // S3ÏóêÏÑú ÌååÏùº ÏÇ≠Ï†ú
      if (badge[0].image_url) {
        const fileName = badge[0].image_url.split('/').pop(); // S3 ÌååÏùº Ïù¥Î¶Ñ Ï∂îÏ∂ú
        
        try {
          await deleteFileFromS3(fileName, dojang_code); // deleteFileFromS3 Ìï®Ïàò ÏÇ¨Ïö©
          console.log(`S3 file deleted: ${fileName}`);
        } catch (s3Error) {
          console.error('Error deleting file from S3:', s3Error);
        }
      }
  
      // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ÏóêÏÑú Î∞∞ÏßÄ ÏÇ≠Ï†ú
      await db.query('DELETE FROM badges WHERE id = ? AND dojang_code = ?', [badgeId, dojang_code]);
  
      res.status(200).json({ message: 'Badge deleted successfully' });
    } catch (err) {
      console.error('Error deleting badge:', err);
      res.status(500).json({ message: 'Database error', error: err });
    }
  });
  
// ÌÜµÌï© API
router.get('/testresult', verifyToken, async (req, res) => {
    const { condition_type } = req.query;
    const { dojang_code } = req.user;

    try {
        if (condition_type) {
            // ÌäπÏ†ï ÌèâÍ∞ÄÌï≠Î™© Í∏∞Ï§ÄÏúºÎ°ú Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå, idÏôÄ student_id Ï†úÏô∏
            const query = `
                SELECT 
                    tr.speed_kick, tr.push_up, tr.sit_up, tr.squat, tr.punch_combo, tr.kick_combo, tr.form, tr.board_breaking 
                FROM testresult tr
                WHERE tr.${condition_type} IS NOT NULL 
                AND tr.dojang_code = ?
            `;
            const [results] = await db.query(query, [dojang_code]);
            return res.status(200).json(results);
        } else {
            // Ïà´ÏûêÌòï Ïª¨ÎüºÎ™Ö Ï°∞Ìöå (idÏôÄ student_id Ï†úÏô∏)
            const columnQuery = `
                SELECT COLUMN_NAME 
                FROM INFORMATION_SCHEMA.COLUMNS 
                WHERE TABLE_NAME = 'testresult'
                AND COLUMN_NAME NOT IN ('id', 'student_id')
                AND DATA_TYPE IN ('int', 'float', 'double', 'decimal');
            `;
            const [columns] = await db.query(columnQuery);
            const columnNames = columns.map(col => col.COLUMN_NAME);
            return res.status(200).json(columnNames);
        }
    } catch (error) {
        console.error('Error in testresult API:', error);
        res.status(500).json({ message: 'Database error', error });
    }
});



router.get('/badges-with-results/:childId', verifyToken, async (req, res) => {
  const { childId } = req.params;
  const { dojang_code } = req.user;

  console.log(`üîç Fetching badges with test results for childId: ${childId}, dojang_code: ${dojang_code}`);

  try {
      const query = `
          SELECT 
              b.id AS badge_id,
              b.name AS badge_name,
              b.image_url,
              b.dojang_code,
              b.test_template_id,
              b.condition_value,
              t.test_name,
              MAX(r.result_value) AS result_value,  -- ‚úÖ ÏµúÏã† ÌÖåÏä§Ìä∏ Í≤∞Í≥º Í∞ÄÏ†∏Ïò§Í∏∞
              DATE_FORMAT(MAX(r.created_at), '%Y-%m-%d') AS test_date  -- ‚úÖ ÏµúÏã† ÌÖåÏä§Ìä∏ ÎÇ†Ïßú Í∞ÄÏ†∏Ïò§Í∏∞
          FROM badges b
          LEFT JOIN test_template t ON b.test_template_id = t.id
          LEFT JOIN testresult r ON b.test_template_id = r.test_template_id AND r.student_id = ?
          WHERE b.dojang_code = ?
          GROUP BY b.id, b.name, b.image_url, b.dojang_code, b.test_template_id, 
                   b.condition_value, t.test_name
          ORDER BY b.id ASC;
      `;

      const [results] = await db.query(query, [childId, dojang_code]);

      if (results.length === 0) {
          console.warn(`‚ö† No badges found for childId: ${childId}`);
          return res.status(404).json({ message: `No badges found for childId: ${childId}` });
      }

      console.log(`‚úî Fetched badges with test results:`, results);
      res.status(200).json(results);
  } catch (error) {
      console.error('‚ùå Error fetching badges with test results:', error);
      res.status(500).json({ message: 'Database error', error });
  }
});




router.get('/badge-condition-types', verifyToken, async (req, res) => {
  try {
    const query = `
      SELECT id, test_name, evaluation_type, 
        CASE 
          WHEN evaluation_type = 'time' THEN target_count 
          WHEN evaluation_type = 'count' THEN duration
          ELSE NULL 
        END AS value
      FROM test_template
      WHERE evaluation_type IN ('count', 'time')
      ORDER BY test_name ASC;
    `;
    
    const [results] = await db.query(query);
    
    if (results.length === 0) {
      console.warn("‚ö† No condition types found in test_template.");
      return res.status(404).json({ message: 'No condition types found.' });
    }
    
    console.log("üîç Fetched Badge Condition Types:", results);
    res.status(200).json(results);
  } catch (error) {
    console.error("‚ùå Error fetching badge condition types:", error);
    res.status(500).json({ message: 'Database error', error });
  }
});


module.exports = router;
